{% import_yaml "tinc/osmap.yaml" as osmap %}
{% import_yaml "tinc/defaults.yaml" as defaults %}
{% import_yaml "tinc/defaults.network.yaml" as network_defaults %}
{% import_yaml "tinc/defaults.node.yaml" as node_defaults %}

{# Get Mine Data #}
{% set roles = salt['mine.get']('*', 'tinc_networks', expr_form = 'glob') %}
{% set tinc_externalip = salt['mine.get']('*', 'tinc_externalip', expr_form = 'glob') %}

{# Map OS to OSName #}
{% set os_distro = salt['grains.filter_by'](osmap,grain='os',default='Debian') %}

{# Map Operating System version #}
{% if grains['os'] == 'Ubuntu' %}
{% set os_settings = salt['grains.filter_by'](os_distro,grain='osrelease',base='common') %}
{% else %}
{% set os_settings = salt['grains.filter_by'](os_distro,grain='osmajorrelease',base='common') %}
{% endif %}

{# Merge in defaults to OS settings #}
{% do defaults.tinc.update(os_settings) %}

{# Merge in pillar #}
{% set tinc_pillar = salt['pillar.get']('tinc',default=defaults.tinc,merge=True) %}

{# Add Network Defaults #}
{% for network, network_settings in tinc_pillar['network'].iteritems() %}
{% set merged_network=salt['pillar.get']('tinc:network:'~network,default = network_defaults,merge=True) %}
{% do tinc_pillar['network'][network].update(merged_network) %}
{% if network_settings['node'] %}
{% for node, node_setting in network_settings['node'].iteritems() %}
{% set merged_node = salt['pillar.get']('tinc:network:'~network~':node:'~node,default=node_defaults,merge=True) %}
{% do tinc_pillar['network'][network]['node'][node].update(merged_node) %}
{% endfor %}
{% endif %}
{% endfor %}

{# Pop unused networks #}
{% for network in tinc_pillar['network'].keys() if (network not in roles[grains['id']]) %}
{% do tinc_pillar['network'].pop(network) %}
{% endfor %}


{# Merge Custom Config #}
{% for network, network_settings in tinc_pillar['network'].iteritems() %}
{% if tinc_pillar['network'][network]['node'][host] is not defined %}
{% do tinc_pillar['network'][network]['node'].update({host: node_defaults}) %}
{% endif %}
{% set network_conf_local=tinc_pillar['network'][network]['conf']['local'] %}
{% set network_conf_host=tinc_pillar['network'][network]['conf']['host'] %}
{% set network_scripts_local=tinc_pillar['network'][network]['scripts']['local'] %}
{% set network_scripts_host=tinc_pillar['network'][network]['scripts']['host'] %}
{% do tinc_pillar['network'][network]['node'][host]['conf'].update({'local': salt['pillar.get']('tinc:network:'~network~':node:'~host~':conf:local',default=network_conf_local,merge=True)}) %}
{% do tinc_pillar['network'][network]['node'][host]['conf'].update({'host': salt['pillar.get']('tinc:network:'~network~':node:'~host~':conf:host',default=network_conf_host,merge=True)}) %}
{% do tinc_pillar['network'][network]['node'][host]['scripts'].update({'local': salt['pillar.get']('tinc:network:'~network~':node:'~host~':scripts:local',default=network_scripts_local,merge=True)}) %}
{% do tinc_pillar['network'][network]['node'][host]['scripts'].update({'host': salt['pillar.get']('tinc:network:'~network~':node:'~host~':scripts:host',default=network_scripts_host,merge=True)}) %}
{% if tinc_externalip[host] is defined and tinc_pillar['network'][network]['node'][host]['ip'] == "" %}
{% do tinc_pillar['network'][network]['node'][host].update({'ip': tinc_externalip[host]}) %}
{% endif %}
{% endfor %}

{# Create import pillar #}
{% set tinc = tinc_pillar %}
